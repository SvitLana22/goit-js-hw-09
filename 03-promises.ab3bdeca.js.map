{"mappings":"YA+BA,IAAMA,EAAO,CACXC,SAAUC,SAASC,cAAc,gBACjCC,KAAMF,SAASC,cAAc,eAC7BE,MAAOH,SAASC,cAAc,gBAC9BG,QAASJ,SAASC,cAAc,kBAChCI,QAASL,SAASC,cAAc,kBAChCK,eAAgBN,SAASC,cAAc,qBAGzCH,EAAKC,SAASQ,aAAa,YAAY,GAEvC,IAAMC,EAAU,CACdC,YAAY,EACZC,WAAW,EACXC,YAAa,IAAIC,KACjBC,gBAAiB,EACjBC,QAAA,SAAQC,GACKA,EAAc,GACVH,KAAKI,OAClBlB,EAAKC,SAASkB,gBAAgB,YAQrBF,EAAc,GAAGG,WAN1BC,OAAOC,QAAQ,qCAAsC,CACnDC,SAAU,gBACVC,cAAc,G,GAOtBC,UAAUzB,EAAKQ,eAAgBE,GAE/BV,EAAKC,SAASyB,iBAAiB,SAE/B,WACeC,aAAY,YAO3B,WACE,IAAMC,EAAc,IAAId,KAGlBe,EAFe,IAAIf,KAAKd,EAAKQ,eAAesB,OAEjBF,EAEjC,GAAIC,EAAY,EACd,OAEA,IAA0CE,EAQ9C,SAAmBC,GAEjB,IAAMC,EAAS,IACTC,EAAkB,GAATD,EACTE,EAAgB,GAATD,EACPE,EAAa,GAAPD,EAGN/B,EAAOiC,KAAKC,MAAMN,EAAKI,GAEvB/B,EAAQgC,KAAKC,MAAMN,EAAMI,EAAOD,GAEhC7B,EAAU+B,KAAKC,MAAMN,EAAOI,EAAOD,EAAQD,GAE3C3B,EAAU8B,KAAKC,MAAMN,EAAQI,EAAOD,EAAQD,EAAUD,GAE5D,MAAO,CAAE7B,OAAMC,QAAOC,UAASC,U,CAxBagC,CAAUV,GAA5CzB,EAAkC2B,EAAlC3B,KAAMC,EAA4B0B,EAA5B1B,MAAOC,EAAqByB,EAArBzB,QAASC,EAAYwB,EAAZxB,QAC9BP,EAAKI,KAAKoC,YAAc,GAAQC,OAALrC,GAC3BJ,EAAKK,MAAMmC,YAAc,GAASC,OAANpC,GAC5BL,EAAKM,QAAQkC,YAAc,GAAWC,OAARnC,GAC9BN,EAAKO,QAAQiC,YAAc,GAAWC,OAARlC,E,CAnB9BmC,E,GACC,KACH1C,EAAKQ,eAAemC,UAAW,EAC/B3C,EAAKC,SAAS0C,UAAW,C","sources":["src/js/03-promises.js"],"sourcesContent":["// import Notiflix from 'notiflix';\n\n// const formRef = document.querySelector('.form');\n// formRef.addEventListener('submit', onBtnSubmit);\n\n// function onBtnSubmit(event) {\n//   event.preventDefault();\n//   const amountValue = Number(formRef.amount.value);\n//   let delayValue = Number(formRef.delay.value);\n//   const stepValue = Number(formRef.step.value);\n//   for (let index = 0; index < amountValue; index += 1) {\n//     const position = index + 1;\n//     delayValue += stepValue;\n//     createPromise(position, delayValue)\n//       .then(message => Notiflix.Notify.success(message))\n//       .catch(error => Notiflix.Notify.success(error));\n//   }\n// }\n\n// function createPromise(position, delayValue) {\n//   const shouldResolve = Math.random() > 0.3;\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve(`✅ Fulfilled promise ${position} in ${delayValue}ms`);\n//       }\n//       reject(`❌ Rejected promise ${position} in ${delayValue}ms`);\n//     }, delayValue);\n//   });\n// }\n\nconst refs = {\n  startBtn: document.querySelector('[data-start]'),\n  days: document.querySelector('[data-days]'),\n  hours: document.querySelector('[data-hours]'),\n  minutes: document.querySelector('[data-minutes]'),\n  seconds: document.querySelector('[data-seconds]'),\n  dateTimePicker: document.querySelector('#datetime-picker'),\n};\nlet userDate = null;\nrefs.startBtn.setAttribute('disabled', true);\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userDate = selectedDates[0];\n    if (userDate > Date.now()) {\n      refs.startBtn.removeAttribute('disabled');\n    } else {\n      Notify.failure('Please choose a date in the future', {\n        position: 'center-center',\n        clickToClose: true,\n      });\n      return;\n    }\n    userDate = selectedDates[0].getTime();\n  },\n};\nflatpickr(refs.dateTimePicker, options);\nlet intervalId = null;\nrefs.startBtn.addEventListener('click', onStartBtnClick);\n\nfunction onStartBtnClick() {\n  intervalId = setInterval(() => {\n    updateTime();\n  }, 1000);\n  refs.dateTimePicker.disabled = true;\n  refs.startBtn.disabled = true;\n}\n\nfunction updateTime() {\n  const currentTime = new Date();\n  const selectedTime = new Date(refs.dateTimePicker.value);\n\n  const deltaTime = selectedTime - currentTime;\n\n  if (deltaTime < 0) {\n    return;\n  } else {\n    const { days, hours, minutes, seconds } = convertMs(deltaTime);\n    refs.days.textContent = `${days}`;\n    refs.hours.textContent = `${hours}`;\n    refs.minutes.textContent = `${minutes}`;\n    refs.seconds.textContent = `${seconds}`;\n  }\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["$ce04d3a99e08e73b$var$refs","startBtn","document","querySelector","days","hours","minutes","seconds","dateTimePicker","setAttribute","$ce04d3a99e08e73b$var$options","enableTime","time_24hr","defaultDate","Date","minuteIncrement","onClose","selectedDates","now","removeAttribute","getTime","Notify","failure","position","clickToClose","flatpickr","addEventListener","setInterval","currentTime","deltaTime","value","ref","ms","second","minute","hour","day","Math","floor","$ce04d3a99e08e73b$var$convertMs","textContent","concat","$ce04d3a99e08e73b$var$updateTime","disabled"],"version":3,"file":"03-promises.ab3bdeca.js.map"}